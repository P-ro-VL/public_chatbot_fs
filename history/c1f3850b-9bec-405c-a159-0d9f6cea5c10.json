[{"role": "system", "content": "You are an expert in financial statement and database management. You will be asked to convert a natural language query into a SQL query. \n### Database Description\n<overall_description>\n\nThe database conatains financial statments of top Vietnamese firms, followed by the regulation of Vietnamese Accounting Standard (VAS). Based on VAS regulation, there are 3 type of financial statments: bank, corporation and securities firm, and there will be sight differences between them.\n\nThe database includes two reporting periods: quarterly and annually. Quarterly reports specify the relevant quarter (1, 2, 3, 4), whereas annual reports are indicated with the quarter set to 0.\n\n</overall_description>\n\n### PostgreSQL tables, with their properties, in OpenAI Template\n\n<schema>\n\n- **company_info**(stock_code, industry, exchange, stock_indices, is_bank, is_securities)\n- **sub_and_shareholder**(stock_code, invest_on)\n- **financial_statement**(stock_code, year, quarter, category_code, data, date_added)\n- **industry_financial_statement**(industry, year, quarter, category_code, data_mean, data_sun, date_added)\n- **financial_ratio**(ratio_code, stock_code, year, quarter, data, date_added)\n- **industry_financial_ratio**(industry, ratio_code, year, quarter, data_mean, date_added)\n- **financial_statement_explaination**(category_code, stock_code, year, quarter, data, date_added)\n- **industry_financial_statement_explaination**(industry, year, quarter, category_code, data_mean, data_sun, date_added)\n\n</schema>\n\n### Note on schema description: \n- For `industry_` tables, column `data_mean` is average data of all firms in that industry, and `data_sum` is the sum of them.\n- Table `financial_statement_explaination` contains information which is not covered in 3 main reports, usually about type of loans, debt, cash, investments and real-estate ownerships. \n- Each value in `category_code` includes a prefix indicating the report it pertains to: *BS* is Balance sheet, *IS* is for Income statement, *CF* is Cash flow and *TM* is for Explaination. For `category_code` in financial_statement_explaination databases, there are 4 additional prefix: *Crop*, *Bank*, *Sec* and *Share* for specific type of organization.\n- With YoY ratio in `financial_ratio`, you should recalculate the ratio if the time window is not 1 year.\n\n### Note on query:\n- You will be provided a mapping table with caption for `category_code` and `ratio_code`, and you are only allow to use that reference to select suitable code.\n- For any financial ratio, it must be selected from the database rather than being calculated manually.\n- If two rows share a similar meaning, using a rounded code.\n- Always include a `quarter` condition in your query. If not specified, assume using annual reports, with the query defaulting to `quarter` = 0.\n- Always include a LIMIT clause in your query."}, {"role": "user", "content": "Here is a natural language query that you need to convert into a SQL query:\n\n<task>\n\nThe user wants to know the ROAA of the banking industry from 2016 to 2023, so return the ROAA of all banks from 2016 to 2023.\n\n</task>\n\n### Company details and Snapshot of the mapping table:\n<data>\n\n#### Company Info\n\n| stock_code | en_company_name | industry | is_bank | is_securities |\n| --- | --- | --- | --- | --- |\n| MBB | Military Commercial Joint Stock Bank | Banking | True | False | \n| SHB | Saigon-Hanoi Commercial Joint Stock Bank | Banking | True | False |\n\n#### category_code_mapping\n\nList of category_code with corresponding en_caption\n- BS_101: (Balance sheet) (Securities) Financial Assets\n- BS_153: (Balance sheet) Missing assets pending resolution\n- BS_220: (Balance sheet) Fixed assets\n- BS_221: (Balance sheet) Tangible fixed assets\n- BS_260: (Balance sheet) Other non-current assets\n- BS_270: (Balance sheet) TOTAL ASSETS\n- IS_153: (Income statement) (Bank) Net Profit/Loss from Service Activities\n- IS_045: (Income statement) Financial income\n- IS_060: (Income statement) Net profit from operating activities\n- IS_100: (Income statement) Profit after corporate income tax (Net Income)\n- IS_104: (Income statement) Profit after tax attributable to non-controlling interests\n- IS_110: (Income statement) (Securities) OTHER COMPREHENSIVE INCOME (LOSS) AFTER TAX\n- BS_119: (Balance sheet) (Securities) Available-for-sale financial assets (AFS)\n- CF_025: (Cash flow) (Bank) (Increase)/Decrease in other operating assets\n- CF_203: (Cash flow) (Securities) Increase (decrease) in available-for-sale financial assets (AFS)\n- IS_013: (Income statement) (Securities) Investment advisory revenue\n- IS_016: (Income statement) (Securities) Other operating income\n- IS_044: (Income statement) (Securities) Other investment revenue\n\n#### ratio_code_mapping\n\nList of ratio_code with corresponding ratio_name\n- FITNRR: Financial Income To Net Revenue Ratio\n- ROA: Return On Assets\n- NPM: Net profit margin\n- ROAA: Return On Average Assets\n\n#### industry\n\nList of items *industry*\n- Financial Services\n- Banking\n\n</data>\n\n### Example:\n\n<example>\n\n**What is the Return on Equity (ROE) for all Banking companies in Q1 2024?**\n\n```sql\nSELECT\n    stock_code,\n    year,\n    quarter,\n    ratio_code,\n    data \nFROM financial_ratio\nWHERE ratio_code = 'ROE'\n  AND year = 2024\n  AND quarter = 1\n  AND stock_code IN (SELECT stock_code FROM company_info WHERE is_bank = TRUE);\n```\n\n**Compare Return on Asset (ROA) of BIDV in 2019 with the average ROA of all banks in 2019**\n\n```sql\n-- Get ROA of BIDV in 2019\nWITH bidv_roa AS (\n    SELECT \n        fr.stock_code,\n        fr.data AS roa_percentage\n    FROM \n        financial_ratio fr\n    WHERE \n        fr.stock_code = 'BID'\n        AND fr.year = 2019\n        AND fr.quarter = 0\n        AND fr.ratio_code = 'ROA'\n),\n\n-- Get average ROA of all banks in 2019\naverage_roa AS (\n    SELECT \n        data_mean AS average_roa_percentage\n    FROM \n        industry_financial_ratio ifr\n    WHERE \n        ifr.year = 2019\n        AND ifr.quarter = 0\n        AND ifr.ratio_code = 'ROA'\n        AND ifr.industry = 'Banking'\n)\n\nSELECT \n    b.stock_code,\n    b.roa_percentage,\n    a.average_roa_percentage\nFROM \n    bidv_roa b,\n    average_roa a\nLIMIT 1;\n```\n\n**ROA of MBBank in Q1 2023**\n\n```sql\nSELECT\n    stock_code,\n    year,\n    quarter,\n    ratio_code,\n    data\nFROM financial_ratio\nWHERE ratio_code = 'ROA'\n  AND year = 2023\n  AND quarter = 1\n  AND stock_code = 'MBB'\nLIMIT 100;\n```\n\n</example>\n \n<instruction>\n\nAnalyze the task step-by-step and return suitable SQL query.\n\nIf possible, the table result should have the following columns:\n\n- stock_code / industry\n- year\n- quarter\n- category_code / ratio_code\n- data / data_mean / data_sum\n\nHowever, feel free to modify the table if needed.\n\n</instruction>\n\n### Note: \n- Include the detailed name of the table result in the query in the following format:\n\n```sql\n-- ### detailed_table_name\n```\n- The query must not contain column `ratio_name` or `en_caption`.\n- Do not make any assumption about the account name. You must refer to the mapping table.\n- If the question requires data within the quarter time range (from 2020 to Q3 2024), you should use the `date_added` in the following format:\n\n```sql\nWHERE date_added BETWEEN '2020-01-01' AND '2024-09-30' \nAND quarter !=0\n\n-- - Q1: YYYY-03-30\n-- - Q2: YYYY-06-30\n-- - Q3: YYYY-09-30\n-- - Q4: YYYY-12-30\n-- - Q0: YYYY-12-30 (Annual data)\n```"}, {"role": "assistant", "content": "```sql\n-- ### roaa_of_banking_industry_2016_to_2023\nSELECT \n    ifr.industry,\n    ifr.year,\n    ifr.quarter,\n    ifr.ratio_code,\n    ifr.data_mean\nFROM industry_financial_ratio ifr\nWHERE ifr.ratio_code = 'ROAA'\n  AND ifr.industry = 'Banking'\n  AND ifr.year BETWEEN 2016 AND 2023\nLIMIT 100;\n```"}]